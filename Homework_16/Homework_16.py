# # ------------------------Задача 1--------------------------
# Дан текстовый файл.
# Написать функцию, которая будет подсчитывать количество чисел в строке,
# которые отделены пробелами, возвращаемое значение должно быть типа int.
# Применить эту функцию для файла и найти общее кол-во таких чисел
def count_numbers(file):
    a = file.split(" ")
    count = 0
    for i in a:
        if i.isdigit():
            count += 1
    return count


with open("Test_1.txt", "r") as f:
    x = f.readline()
    print(x)
    print(count_numbers(x))

# # ------------------------Задача 2--------------------------
# Дан текстовый файл. Написать функцию, которая составляет шифр для цифр
# (шифр можете придумать свой, вот пример 1 → ! | 2 → @  | 3 → #  |  4 → $  и т.д.),
# возвращаемое значение должно быть типа string.
# Применить эту функцию для файла и заменить все цифры на зашифрованные значения

def code():
    for i in x:
        i.replace("\n", "")
        a = i
        for j in code_str:
           i = i.replace(j, code_str[j])
        print(f"Было: {a}\n"
              f"Стало: {i}\n")


code_str = {"1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&", "8": "*", "9": "(", "0": ")"}

with open("Test_2.txt", "r") as f_start:
    x = f_start.read().splitlines()
    print(x)
    code()

# # ------------------------Задача 3--------------------------
# Дан текстовый файл. Написать функцию, которая ищет упоминание о файле формата .txt.
# Функция должна возвращать имя такого файла без пробелов и вместе с расширением .txt.
# Применить эту функцию для файла и создать список с именами файлов
import re

def find():
    a = []
    for i in x:
        if re.findall(reg_ex, i):
            a.append(i)
    return a


reg_ex = "[.]txt$"
with open("Test_3.txt", "r") as f:
    x = f.read().splitlines()
    print(find())

# # ------------------------Задача 4--------------------------

# Системный администратор раз в неделю создаёт архив пользовательских файлов.
# Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.

# По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей,
# чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве,
# при условии, что сохранены файлы максимально возможного числа пользователей.

# В первой строке входного файла находятся два числа: S — размер свободного места на диске (натуральное число, не превышающее 10 000)
# и N — количество пользователей (натуральное число, не превышающее 1000).
# В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100),
# каждое в отдельной строке.

# Запишите в ответе два числа: сначала наибольшее число пользователей,
# чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве,
# при условии, что сохранены файлы максимально возможного числа пользователей.

def find_sum():
    summ = 0
    for i in range(len(x_int)):
        if summ + i < a[0]:
            summ += x_int[i]
        else:
            return i, x[i]


with open("26_demo.txt", "r") as f:
    x = f.read().splitlines()
    a = list(map(int, x[0].split(" ")))
    x.pop(0)
    x_int = list(map(int, x))
    x_int.sort()
    max_count, max_file = find_sum()
    print(max_count, max_file)






















